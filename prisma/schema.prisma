// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String           @id @default(cuid())
  name           String?
  username       String?          @unique
  email          String           @unique
  emailVerified  DateTime?
  passwordHash   String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  // // Optional for WebAuthn support
  // Authenticator Authenticator[]
  IsFirstLogin   Boolean          @default(true)
  Blog           Blog[]
  preferences    UserPreference[]
  loginHistories LoginHistory[]   @relation("UserLoginHistories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Like      Like[]
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserLoginHistories")
  browser   String
  ip        String
  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Blog {
  id        String      @id @default(cuid())
  title     String
  blog_slug String
  content   String
  published Boolean     @default(false)
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  link      String?
  image     String?
  avgRating Int?
  ratings   Rating[]
  comments  Comment[]
  likes     Like[]
  topics    BlogTopic[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Topic {
  id              String           @id @default(cuid())
  title           String
  topic_slug      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  blogs           BlogTopic[]
  userPreferences UserPreference[]
}

model BlogTopic {
  id        String   @id @default(cuid())
  blogId    String
  topicId   String
  blog      Blog     @relation(fields: [blogId], references: [id])
  topic     Topic    @relation(fields: [topicId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Rating {
  id        String   @id @default(cuid())
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
}

model Saved {
  id        String   @id @default(cuid())
  blogId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  User      User?     @relation(fields: [userId], references: [id])
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String
  topicId   String
  user      User     @relation(fields: [userId], references: [id])
  topic     Topic    @relation(fields: [topicId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
